
# param (
#     [parameter(Mandatory = $true)]
#     [ValidateNotNullOrEmpty()]$BASE_URL
# )

. .\driver.ps1
. ..\utils\vmApi.ps1
. ..\utils\createvmApi.ps1
. ..\data\testdata.ps1

Describe "Given az cli login" {

    $testCases = Get-Content -Raw -Path "..\testCases\vm.json" | ConvertFrom-JSON

    Context "Create VM workflow" {

        Write-Host "VMPREFIX:" $VMPREFIX.ToUpper()

        foreach ($test in $testCases) {

            # $validURL = $BASE_URL.toString() -match "http"
            # if($validURL -eq $False){
            #     Write-Host 'Invalid URL'
            #     Exit
            # }else{ $CREATE_VM_URL = $BASE_URL + "api/orchestrators/CreateVirtualMachineWorkflow"}

            # if($test.vm -eq ""){
            #     $vm = $env:COMPUTERNAME
            # }
            # else{
            #     $vm = $test.vm
            # }
            
            switch ($test.id) {

                "00 createvm"{
                    if($test.data -eq $True){
                          It ($test.id) {
                            $flag = $false
                            $result = createvmAPI $CREATE_VM_URL $SUBSCRIPTION_ID $RESOURCEID $LAB_ID $VMPREFIX.ToUpper() $USERUPN $MACHINESIZE
                            Write-Host "Create VM Still: " $result

                            #Testing
                            # $result = 'Running'
                            # $VM_NAME = "DDG-TANQ-SRT-G4"
                            if(($result -eq "Running") -or ($result -eq "Completed"))
                            {
                                $flag = $true
                                $VM_NAME = getVMName $RESOURCEID $VMPREFIX
                                Write-Host "VM :" $VM_NAME 
                                if($VM_NAME -ne "NA"){
                                    $VM_NAME.ToUpper() | Out-File -FilePath ".\vmname.txt" -Append
                                    # Add-Content .\'vmname.txt' $VM_NAME
                                }else{ $VMPREFIX.ToUpper() | Out-File -FilePath ".\vmname.txt"  -Append}
                                $flag | Should be $True
                            }
                            
                            }
                          }
                
                }# End of create vm

                "07 vm exists" {
                    if ($test.enabled -eq $True) {
                        It ($test.id) {
                            $flag = $False
                            $VM_NAME =   $VM_NAME = getVMName $RESOURCEID $VMPREFIX
                            Write-Host "VM Name: " $VM_NAME
                            if($VM_NAME -ne "NA"){
                                #$flag = vmExists $RESOURCEID $VM_NAME
                                $flag = vmExists $VM_NAME
                            }
                            $flag | Should be $True
                           
                        }
                    }
                } #end of 00

                "000001 rg exists" {
                    if ($test.enabled -eq $True) {
                        It ($test.id) {
                            $flag = $False
                            $flag = rgExists $RESOURCEID
                            $flag | Should be $True
                           
                        }
                    }
                } 

                "00002 vm location" {
                    if ($test.enabled -eq $True) {
                        It ($test.id) {
                            $flag = $False
                            $location = vmLocation $RESOURCEID $vm
                            if($location -eq $test.tcExpectedResult){
                                $flag = $True
                            }
                            $flag | Should be $True
                           
                        }
                    }
                } 
        
     

            }
        }
    }


}

#---------------------------

. ..\utils\vmApi.ps1

$KEY_VAULT = "kv-ddg01-neu-test"
$SECRET_SECURE = "dd-cmdb-vmstate-orchestration-url"
$KEY_VAULT_RG = "rg-ddg01-neu-test-mngmt"
# $SECRET_SECURE 

$NUM = Get-Random -Maximum 99
$PREFIXONE = ((65..90) + (97..122) | Get-Random -Count 1 | % {[char]$_}) 
$PREFIXTWON = ((65..90) + (97..122) | Get-Random -Count 1 | % {[char]$_})
$PREFIXTHREE = ((65..90) + (97..122) | Get-Random -Count 1 | % {[char]$_}) 

$VMPREFIX = "DDG-TANG-" + $PREFIXONE + $PREFIXTWON + $PREFIXTHREE

$url = az keyvault secret show --name $SECRET_SECURE --vault-name $KEY_VAULT --query value -o tsv
$urlArray = $url.Split("?")
$BASE_URL = $urlArray[0]
$CODE =  $urlArray[1]

$VMFOUND = $false
$VMSTATUS = ""


$RUN_COMMAND_URL = $BASE_URL+"/VMRunCommandWorkflow?"+$CODE
$CREATE_VM_URL = $BASE_URL+"/CreateVirtualMachineWorkflow?"+$CODE
$JOIN_DOMAIN_URL = $BASE_URL + "/JoinDomainWorkflow?"+$CODE
$APPLY_LICENSE_URL = $BASE_URL + "/ApplyLicenseWorkflow?"+$CODE
$EXP_DATE_URL = $BASE_URL + "/ExtendExpirationDateWorkflow?"+$CODE
$CREATE_DESKTOP_URL = $BASE_URL + "/desktops?"+$CODE


# $VM_NAME = $env:COMPUTERNAME

$VM_NAME = "DDG-TANG-ZNP-9S"

$EXP_DATE = "2020-12-21T23:00:00.000Z"


# $VM_NAME = "DDG-TANQ-SR-01" #"dtest01-Utkarsh"

$RESOURCE_GROUP = "rg-ddg-test01-weu-test" #"rg-ddg-test01-weu-test" #"rg-ddg-chk0-neu-prod" #"rg-ddg-team0-neu-prod" #"rg-ddg-test01-weu-test" #
$RESOURCEID =  "rg-ddg-test01-weu-test" #"rg-ddg-test01-weu-test" #"rg-ddg-test01-weu-test"
$SUBSCRIPTION = "ba-ise-ddg01-eu-appdev"
$SUBSCRIPTION_ID = "e30f1618-a35d-4a9a-88a1-82057c28c331"
$LABNAME = "ddg-test01-weu-test" #"ddg-test01-weu-test" #"ddg-team0-neu-prod" #"ddg-test01-weu-test" 
$LAB_ID = "ddg-test01-weu-test" #"ddg-test01-weu-test" #"ddg-chk0-neu-prod" #"ddg-test01-weu-test" #"ddg-team0-neu-prod"

#----Other details
$MAX_DURATION = 2
$SCRIPT = "echo hello world \n echo hello world"
$DOMAIN_FQDN = "UBSCLOUD-PROD.msad.ubs.net"
$DOMAIN_USER_NAME = "santu.roy@ubs.com"
$OUPATH = "" 


$NUM = Get-Random -Maximum 99
$PREFIXONE = ((65..90) + (97..122) | Get-Random -Count 1 | % {[char]$_}) 
$PREFIXTWON = ((65..90) + (97..122) | Get-Random -Count 1 | % {[char]$_})
$PREFIXTHREE = ((65..90) + (97..122) | Get-Random -Count 1 | % {[char]$_}) 

$VMPREFIX = "DDG-TANG-" + $PREFIXONE + $PREFIXTWON + $PREFIXTHREE

$url = az keyvault secret show --name $SECRET_SECURE --vault-name $KEY_VAULT --query value -o tsv
$urlArray = $url.Split("?")
$BASE_URL = $urlArray[0]
$CODE =  $urlArray[1]

$VMFOUND = $false
$VMSTATUS = ""

$RUN_COMMAND_URL = $BASE_URL+"/VMRunCommandWorkflow?"+$CODE
$CREATE_VM_URL = $BASE_URL+"/CreateVirtualMachineWorkflow?"+$CODE
$JOIN_DOMAIN_URL = $BASE_URL + "/JoinDomainWorkflow?"+$CODE
$APPLY_LICENSE_URL = $BASE_URL + "/ApplyLicenseWorkflow?"+$CODE
$ADD_USER_URL = $BASE_URL + "/AddUserToVmWorkflow?"+$CODE 
# $VM_NAME = $env:COMPUTERNAME

# $VM_NAME = "dtest01-Utkarsh"
# $USER_UPN = "andrew.numa@ubs.com"
# $RESOURCE_GROUP = "rg-ddg-test01-weu-test" #"rg-ddg-team0-neu-prod"
# $RESOURCEID = "rg-ddg-test01-weu-test" #"rg-ddg-team0-neu-prod"
$SUBSCRIPTION = "ba-ise-ddg01-eu-appdev"
$SUBSCRIPTION_ID = "e30f1618-a35d-4a9a-88a1-82057c28c331"
$MAX_DURATION = 2
$SCRIPT = "echo hello world \n echo hello world"
$DOMAIN_FQDN = "UBSCLOUD-PROD.msad.ubs.net"
$DOMAIN_USER_NAME = "santu.roy@ubs.com"
$OUPATH = "" 
# $LABNAME = "ddg-team0-neu-prod"


#---------------

Write-Host "Begin Runner Script.."

$projoinDomainTests = start-process pwsh .\joinDomainTestsRunner.ps1  -PassThru -RedirectStandardOutput 'joinDomainTests.log' -RedirectStandardError 'joinDomainTests.err' 

$prolicenseTypeTest = start-process pwsh .\licenseTypeTestsRunner.ps1  -PassThru -RedirectStandardOutput 'prolicenseTypeTests.log' -RedirectStandardError 'prolicenseTypeTests.err' 

$extendExpDateTsts = start-process pwsh .\extendExpDateTstsRunner.ps1  -PassThru -RedirectStandardOutput 'extendExpDateTsts.log' -RedirectStandardError 'extendExpDateTsts.err' 

$procreateVMTests = start-process pwsh .\createVMTestsRunner.ps1 -PassThru -RedirectStandardOutput 'createVMTests.log' -RedirectStandardError 'createVMTests.err'

$processes = @($procreateVMTests, $projoinDomainTests, $prolicenseTypeTest, $extendExpDateTsts)

Write-Host 'Waiting for processes to exit'
$processes | Wait-Process

$errFile = Get-ChildItem -recurse -filter  "*.err"


if($null -eq $errFile){
    Write-Host 'processes exited' 

    Write-Host "..joinDomainTestsRunner...."
    Get-Content -Path .\joinDomainTests.log

    Write-Host "..prolicenseTypeTest...."
    Get-Content -Path .\prolicenseTypeTests.log

    Write-Host "..extendExpDateTsts...."
    Get-Content -Path .\extendExpDateTsts.log

    Write-Host "..createVMTestsRunner...."
    Get-Content -Path .\createVMTests.log

}else{
    foreach ($file in  $errFile) {
        Write-Host " File Name: "  $file 
        Get-Content -Path $file
    }
   
    Write-Host "Execution Logs files details"
    Write-Host 'processes exited' 

    Write-Host "..joinDomainTestsRunner...."
    Get-Content -Path .\joinDomainTests.log

    Write-Host "..prolicenseTypeTest...."
    Get-Content -Path .\prolicenseTypeTests.log

    Write-Host "..extendExpDateTsts...."
    Get-Content -Path .\extendExpDateTsts.log

    Write-Host "..createVMTestsRunner...."
    Get-Content -Path .\createVMTests.log
}


#-------------

Invoke-Pester -Script @{Path='.\extendExpDateTests.ps1'}  -OutputFormat NUnitXml -OutputFile .\extendExpDateTests.xml

#---------

[
  {
    "id": "00 createvm",
    "data": true,
    "enabled": true,
    "vm": "DDG-TANQ-SR-01",
    "resource": "RG-AZ-DEVTESTLABS-NEU-LOCAL-001",
    "flag": "",
    "tcDescription": "Echo Hello",
    "tcExpectedResult": "succeed",
    "screenShot": ""
  },
  {
    "id": "001 CreateDevDesktop",
    "data": true,
    "enabled": true,
    "vm": "DDG-TANQ-SR-01",
    "resource": "RG-AZ-DEVTESTLABS-NEU-LOCAL-001",
    "flag": "",
    "tcDescription": "Echo Hello",
    "tcExpectedResult": "succeed",
    "screenShot": ""
  },
  {
    "id": "07 vm exists",
    "data": false,
    "enabled": true,
    "vm": "DDG-TANQ-SR-01",
    "resource": "rg-ddg-team0-neu-prod",
    "flag": "",
    "tcDescription": "vm found",
    "tcExpectedResult": true,
    "screenShot": ""
  },

  {
    "id": "001 rg exists",
    "data": false,
    "enabled": true,
    "vm": "DDG-TANQ-SR-01",
    "resource": "",
    "flag": "",
    "tcDescription": "rg found",
    "tcExpectedResult": true,
    "screenShot": ""
  },
  {
    "id": "002 vm location",
    "data": false,
    "enabled": true,
    "vm": "DDG-TANQ-SR-01",
    "resource": "",
    "flag": "",
    "tcDescription": "",
    "tcExpectedResult": "northeurope",
    "screenShot": ""
  },
{
  "id": "04 vmStatus",
  "data": false,
  "enabled": true,
  "vm": "DDG-TANQ-SR-01",
  "resource": "RG-AZ-DEVTESTLABS-NEU-LOCAL-001",
  "flag": "",
  "tcDescription": "vm status",
  "tcExpectedResult": "running",
  "screenShot": ""
},
{
  "id": "02 domainjoin",
  "data": true,
  "enabled": true,
  "vm": "DDG-TANQ-SR-01",
  "resource": "RG-AZ-DEVTESTLABS-NEU-LOCAL-007",
  "flag": "",
  "tcDescription": "domainjoin",
  "tcExpectedResult": "UBSCloud-ENG.msad.ubseng.net",
  "screenShot": ""
},
{
  "id": "03 vmSize",
  "data": false,
  "enabled": false,
  "vm": "DDG-TANQ-SR-01",
  "resource": "RG-AZ-DEVTESTLABS-NEU-LOCAL-001",
  "flag": "",
  "tcDescription": "vmSize",
  "tcExpectedResult": "Standard_B2ms",
  "screenShot": ""
},

{
  "id": "05 localAdmin",
  "data": false,
  "enabled": false,
  "vm": "santuroy001",
  "resource": "RG-AZ-DEVTESTLABS-NEU-LOCAL-001",
  "flag": "",
  "tcDescription": "vm status",
  "tcExpectedResult": "santu",
  "screenShot": ""
},
{
  "id": "06 cmdRunCommand",
  "data": true,
  "enabled": true,
  "vm": "DDG-TANQ-SR-01",
  "resource": "rg-ddg-team0-neu-prod",
  "flag": "",
  "tcDescription": "Echo Hello",
  "tcExpectedResult": "succeed",
  "screenShot": ""
},

{
  "id": "08 addUser",
  "data": true,
  "enabled": true,
  "vm": "DDG-TANQ-SR-01",
  "resource": "RG-AZ-DEVTESTLABS-NEU-LOCAL-001",
  "flag": "",
  "tcDescription": "Echo Hello",
  "tcExpectedResult": "succeed",
  "screenShot": ""
},
{
  "id": "111 LicenseType",
  "data": true,
  "enabled": true,
  "vm": "DDG-TANQ-SR-01",
  "resource": "RG-AZ-DEVTESTLABS-NEU-LOCAL-007",
  "flag": "",
  "tcDescription": "vm license type",
  "tcExpectedResult": "Windows_Client",
  "screenShot": ""
},
{
  "id": "112 extendExpDate",
  "data": true,
  "enabled": true,
  "vm": "dtest01-Utkarsh",
  "resource": "RG-AZ-DEVTESTLABS-NEU-LOCAL-007",
  "flag": "",
  "tcDescription": "vm expiry date",
  "tcExpectedResult": "",
  "screenShot": ""
}
]
