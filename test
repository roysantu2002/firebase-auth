function createvmAPI {

    param (
        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$CREATE_VM_URL, $SUBSCRIPTION_ID, $RESOURCEID, $LAB_ID, $VMPREFIX, $USERUPN, $MACHINESIZE
    )

    $url = $CREATE_VM_URL
    $resourceId = $RESOURCEID
    $labId = "/subscriptions/"+$SUBSCRIPTION_ID+"/resourcegroups/"+$RESOURCEID+"/providers/microsoft.devtestlab/labs/"+$LAB_ID
    $vmPrefix = $VMPREFIX
    # $vmName = $VMNAME
    $userUpn = $USERUPN
    $machineSize = $MACHINESIZE
    # $subnetName = $SUBNET

    Write-Host "labid:" $labId
    $bodyContent = '{{
    "labId":"{0}",
    "vmPrefix":"{1}",
    "userUpn":"{2}",
    "machineSize":"{3}"
}}' -f $labId, $vmPrefix, $userUpn, $machineSize

    $body = '{
    "resourceId": "/subscriptions/"f9632259-8c0f-4e06-a435-b049084f346b/resourcegroups/rg-az-devtestlabs-neu-local-008/providers/microsoft.devtestlab/labs/dtl-dd-lab-008-neu-eng/virtualmachines/lab008create010",
    "labId" : "rg-az-devtestlabs-neu-local-008",
    "vmPrefix" : "san",
    "vmName": "royvmXXX001",
    "userUpn": "santu.roy@ubsdev.com",
    "machineSize": "Standard_D3_v2",
    "subnetName": "user-0001"
}'

#'http://localhost:7071/api/orchestrators/CreateVirtualMachineWorkflow'

    $param = @{
        Uri         =  $url
        Method      = 'POST'
        Body        = $bodyContent 
        ContentType = 'application/json'
    }

    $output = ""

    Write-Host "url: " $url
    Write-Host "func app url print" $url
    # Write-Host "Body :" @param
    try {
        #  $result = Invoke-RestMethod -Method 'Post' -Uri $url -Body $bodyContent
        $result = Invoke-RestMethod @param
        $startTime = $(get-date)
        Write-host "Invoke-RestMethod:00:00:00"   
        $startTime = Get-Date -Format "dddd MM/dd/yyyy HH:mm K"
        Write-Host "StartTime:" $startTime
        Start-Sleep -s 30
        Write-Host "Wait....."
        $statusQueryGetUri = $result.statusQueryGetUri 
        Write-Host "statusQueryGetUri: "  $statusQueryGetUri
        if(!$null -eq  $statusQueryGetUri){

            $statusURLResponse = Invoke-WebRequest -URI $statusQueryGetUri
            $rs = $statusURLResponse.Content | ConvertFrom-Json
            $runtimeStatus = $rs.runtimeStatus

            $waitCount = 1
            while($waitCount -lt 25){
                if($runtimeStatus -eq "Running"){

                    Start-Sleep -s 30
                    $elapsedTime = new-timespan $startTime $(get-date)
                    write-host "Elapsed:$($elapsedTime.ToString("hh\:mm\:ss"))"  

                    $statusURLResponse = Invoke-WebRequest -URI $statusQueryGetUri
                    $rs = $statusURLResponse.Content | ConvertFrom-Json
                    $runtimeStatus = $rs.runtimeStatus
                    #Write-Host "Wait Counter: " $waitCount
                    $waitCount +=1
                }
                if($runtimeStatus -eq "Failed")
                {
                    $runtimeStatus = "Failed"
                    Write-Host "Wait Counter: " $waitCount
                    break
                }
                if($runtimeStatus -eq "Completed")
                {
                    $runtimeStatus = "Completed"
                    Write-Host "Completed: " Completed
                    break
                }
            }
            $endTime = Get-Date -Format "dddd MM/dd/yyyy HH:mm K"

            Write-Host "EndTime:" $endTime
        }
    }
    catch { 
        Write-Host $_.Exception.Message
        $output = "ERR"
     }
    return $runtimeStatus 
}
