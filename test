#set_env

$tc_100_result  = ""
function verifyRegistryFolder{
    param (

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Path
    )
    return Test-Path -Path $Path
}
function Test-RegistryValue {

    param (

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Path,

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Value
    )

    try {

        $c = 0
        Get-Item -Path $Path | Select-Object -ExpandProperty property | % { if ($_ -match $Value) { $c = 1 ; return $true } }
        if ($c -eq 0) { return $false }
    }

    catch {

        return $false

    }

}

function PathExists {
    param(
        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Path
    )
    return Test-Path -Path $Path
}

function VerifyEnvironmentVariable {
    param (

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Name,

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Value
    )

    try {
        $c = 0;
        $count = 0;
        #Verify if the variable exists
        $count = (Get-ChildItem -Path "ENV:\$Name").Count
        if ($count -eq 0) { return $false }

        #If exists, verify Value
        (Get-ChildItem -Path "ENV:\$Name").Value | % { if ($_ -eq $Value) { $c = 1 ; return $true } }
        if ($c -eq 0) { return $false }
     
    }
    catch {
        Write-Output "Inside Catch"
        return $false
    }
}

Describe "Verify Tasks performed by SetEnv.ps1" {

    $testCases = Get-Content -Raw -Path ".\SetEnvTestCases.json" | ConvertFrom-JSON
    $ENV_NAME = "ENG"
    $ubs_path = "C:\UBS exists"
    $ubs_logs_path = "C:\ProgramData\UBS\Logs"
    $ubs_msiexec_path = "C:\ProgramData\UBS\Logs\msiexec"
    $software_reg_path = "HKLM:\SOFTWARE\UBS\"
    $machineConfigData_path = "HKLM:\SOFTWARE\UBS\MachineConfigData"
    $data_path = "HKLM:\SOFTWARE\UBS\MachineConfigData\data"
    $build_path = "HKLM:\SOFTWARE\UBS\Build"

    $transmitPath = "HKLM:\SOFTWARE\Transmit"
    $default = "\AuthServerConnections\default"
    $branding = "\TransmitPolicyClient\Branding"

    $branding_path = "C:\Windows\System32\TransmitBranding"
    $transmit_path = "HKLM:\SOFTWARE\Transmit"
    $tc_100_result = ""

    foreach ($test in $testCases) {
        
        Write-Host $test.enabled
        switch ($test.id) {
        
            "01" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                        $testpath = PathExists -Path $ubs_path
                        Write-Host $testpath
                        $testpath | should be $true
                    }
                }
            }
            "02" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription){
                        $testpath = PathExists -Path $ubs_logs_path
                        Write-Host $testpath
                        $testpath | should be $true
                    }
                }
            
            }

            "03" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                        $testpath = PathExists -Path $ubs_msiexec_path
                        Write-Host $testpath
                        $testpath | should be $true
                    }
                }
            }
            "04" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $software_reg_path 
                            $result | should be $true
                    }
                }
            }
            "05" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $machineConfigData_path 
                            $result | should be $true
                    }
                }
            
            }

            "06" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $data_path
                            $result | should be $true
                    }
                }
            
            }

            "07" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $build_path
                            $result | should be $true
                    }
                }
            
            }

            "080" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $transmit_path
                            $result | should be $true
                    }
                }
            
            }

            "090"{
                if ($test.enabled -eq $True) {
                    It ($test.tcDescription){
                    $tansmit= verifyRegistryFolder -Path $transmitPath
                    Write-Host $transmitPath$default
        
                    if ( $tansmit -eq $True){
                        $AuthServerUrl = Test-RegistryValue -Path $transmitPath$default -Value 'AuthServerUrl'
                        #Write-Host $AuthServerUrl
                        if($AuthServerUrl -eq $True)
                        {
                            $result = (Get-ItemProperty -Path HKLM:\SOFTWARE\Transmit\AuthServerConnections\default -Name AuthServerUrl).AuthServerUrl
                            #Write-Host $result
                            $result | should be 'https://transmit.ubs.net'
                        }
                    }
                }
            }
            }

            "091"{
                if ($test.enabled -eq $True) {
                    It ($test.tcDescription){
                    $tansmit= verifyRegistryFolder -Path $transmitPath
                    #Write-Host $transmitPath$branding
        
                    if ( $tansmit -eq $True){
                        $BrandingJson = Test-RegistryValue -Path $transmitPath$branding -Value 'Branding'
                        #Write-Host $AuthServerUrl
                        if($BrandingJson -eq $True)
                        {
                            $result = (Get-ItemProperty -Path HKLM:\SOFTWARE\Transmit\AuthServerConnections\default -Name Stylesheet).Stylesheet
                            Write-Host $result
                            $result | should be 'TransmitStyles.json'
                        }
                    }
                }
            }
            }

            "100" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $branding_path
                            $tc_100_result = $result
                            $result | should be $true
                    }
                }
            }

            "101" {

                if ($test.enabled -eq $True) {
                 
                    # if$(tc_100_result -eq $True){
                        It ($test.tcDescription) {
                        $result = (Get-ChildItem  -Path C:\Windows\System32\TransmitBranding | Measure-Object).Count
                        $result | should be 13
                  
                    # }
                }
                }
            }

        }
    }


}

#set
$tc_100_result  = ""
function verifyRegistryFolder{
    param (

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Path
    )
    return Test-Path -Path $Path
}
function Test-RegistryValue {

    param (

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Path,

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Value
    )

    try {

        $c = 0
        Get-Item -Path $Path | Select-Object -ExpandProperty property | % { if ($_ -match $Value) { $c = 1 ; return $true } }
        if ($c -eq 0) { return $false }
    }

    catch {

        return $false

    }

}

function PathExists {
    param(
        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Path
    )
    return Test-Path -Path $Path
}

function VerifyEnvironmentVariable {
    param (

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Name,

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]$Value
    )

    try {
        $c = 0;
        $count = 0;
        #Verify if the variable exists
        $count = (Get-ChildItem -Path "ENV:\$Name").Count
        if ($count -eq 0) { return $false }

        #If exists, verify Value
        (Get-ChildItem -Path "ENV:\$Name").Value | % { if ($_ -eq $Value) { $c = 1 ; return $true } }
        if ($c -eq 0) { return $false }
     
    }
    catch {
        Write-Output "Inside Catch"
        return $false
    }
}

Describe "Verify Tasks performed by SetEnv.ps1" {

    $testCases = Get-Content -Raw -Path ".\SetEnvTestCases.json" | ConvertFrom-JSON
    $ENV_NAME = "ENG"
    $ubs_path = "C:\UBS exists"
    $ubs_logs_path = "C:\ProgramData\UBS\Logs"
    $ubs_msiexec_path = "C:\ProgramData\UBS\Logs\msiexec"
    $software_reg_path = "HKLM:\SOFTWARE\UBS\"
    $machineConfigData_path = "HKLM:\SOFTWARE\UBS\MachineConfigData"
    $data_path = "HKLM:\SOFTWARE\UBS\MachineConfigData\data"
    $build_path = "HKLM:\SOFTWARE\UBS\Build"

    $transmitPath = "HKLM:\SOFTWARE\Transmit"
    $default = "\AuthServerConnections\default"
    $branding = "\TransmitPolicyClient\Branding"

    $branding_path = "C:\Windows\System32\TransmitBranding"
    $transmit_path = "HKLM:\SOFTWARE\Transmit"
    $tc_100_result = ""

    foreach ($test in $testCases) {
        
        Write-Host $test.enabled
        switch ($test.id) {
        
            "01" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                        $testpath = PathExists -Path $ubs_path
                        Write-Host $testpath
                        $testpath | should be $true
                    }
                }
            }
            "02" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription){
                        $testpath = PathExists -Path $ubs_logs_path
                        Write-Host $testpath
                        $testpath | should be $true
                    }
                }
            
            }

            "03" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                        $testpath = PathExists -Path $ubs_msiexec_path
                        Write-Host $testpath
                        $testpath | should be $true
                    }
                }
            }
            "04" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $software_reg_path 
                            $result | should be $true
                    }
                }
            }
            "05" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $machineConfigData_path 
                            $result | should be $true
                    }
                }
            
            }

            "06" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $data_path
                            $result | should be $true
                    }
                }
            
            }

            "07" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $build_path
                            $result | should be $true
                    }
                }
            
            }

            "080" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $transmit_path
                            $result | should be $true
                    }
                }
            
            }

            "090"{
                if ($test.enabled -eq $True) {
                    It ($test.tcDescription){
                    $tansmit= verifyRegistryFolder -Path $transmitPath
                    Write-Host $transmitPath$default
        
                    if ( $tansmit -eq $True){
                        $AuthServerUrl = Test-RegistryValue -Path $transmitPath$default -Value 'AuthServerUrl'
                        #Write-Host $AuthServerUrl
                        if($AuthServerUrl -eq $True)
                        {
                            $result = (Get-ItemProperty -Path HKLM:\SOFTWARE\Transmit\AuthServerConnections\default -Name AuthServerUrl).AuthServerUrl
                            #Write-Host $result
                            $result | should be 'https://transmit.ubs.net'
                        }
                    }
                }
            }
            }

            "091"{
                if ($test.enabled -eq $True) {
                    It ($test.tcDescription){
                    $tansmit= verifyRegistryFolder -Path $transmitPath
                    #Write-Host $transmitPath$branding
        
                    if ( $tansmit -eq $True){
                        $BrandingJson = Test-RegistryValue -Path $transmitPath$branding -Value 'Branding'
                        #Write-Host $AuthServerUrl
                        if($BrandingJson -eq $True)
                        {
                            $result = (Get-ItemProperty -Path HKLM:\SOFTWARE\Transmit\AuthServerConnections\default -Name Stylesheet).Stylesheet
                            Write-Host $result
                            $result | should be 'TransmitStyles.json'
                        }
                    }
                }
            }
            }

            "100" {

                if ($test.enabled -eq $True) {
                    It ($test.tcDescription) {
                            $result = Test-Path $branding_path
                            $tc_100_result = $result
                            $result | should be $true
                    }
                }
            }

            "101" {

                if ($test.enabled -eq $True) {
                 
                    # if$(tc_100_result -eq $True){
                        It ($test.tcDescription) {
                        $result = (Get-ChildItem  -Path C:\Windows\System32\TransmitBranding | Measure-Object).Count
                        $result | should be 13
                  
                    # }
                }
                }
            }

        }
    }


}

#-----

[
  {
  "id": "01",
  "enabled": true,
  "flag": "",
  "tcDescription": "If UBS Folder Exists in c: drive",
  "tcExpectedResult": "True",
  "screenShot": ""
},
{
  "id": "02",
  "enabled": true,
  "tcDescription": "If Logs Folder Exists within UBS in c: drive",
  "tcExpectedResult": "True",
  "screenShot": ""
},

{
  "id": "03",
  "enabled": true,
  "tcDescription": "If msiexec Exists within Program Data in c: drive",
  "tcExpectedResult": "True",
  "screenShot": ""
},
{
  "id": "04",
  "enabled": false,
  "tcDescription": "Registry entry HKLM:\\SOFTWARE\\UBS\\ created",
  "tcExpectedResult": "True",
  "screenShot": ""
},
{
  "id": "05",
  "enabled": true,
  "tcDescription": "Registry entry HKLM:\\SOFTWARE\\UBS\\MachineConfigData created",
  "tcExpectedResult": "True",
  "screenShot": ""
},
{
  "id": "06",
  "enabled": true,
  "tcDescription": "Registry entry HKLM:\\SOFTWARE\\UBS\\MachineConfigData\\data created",
  "tcExpectedResult": "True",
  "screenShot": ""
},
{
  "id": "07",
  "enabled": true,
  "tcDescription": "Registry entry HKLM:\\SOFTWARE\\UBS\\Build created",
  "tcExpectedResult": "True",
  "screenShot": ""
},
{
  "id": "080",
  "enabled": true,
  "tcDescription": "Registry entry HKLM:\\SOFTWARE\\Transmit created",
  "tcExpectedResult": "True",
  "screenShot": ""
},

{
  "id": "081",
  "enabled": true,
  "tcDescription": "Registry entry HKLM:\\SOFTWARE\\Transmit\\TransmitPolicyClient\\Branding created",
  "tcExpectedResult": "True",
  "screenShot": ""
},

{
  "id": "090",
  "enabled": true,
  "tcDescription": "Transmit Authorisation Registry",
  "tcExpectedResult": "True",
  "screenShot": ""
},

{
  "id": "091",
  "enabled": true,
  "tcDescription": "Transmit Brand Registry",
  "tcExpectedResult": "True",
  "screenShot": ""
},

{
  "id": "100",
  "enabled": true,
  "tcDescription": "Transmit Brand System Path",
  "tcExpectedResult": "True",
  "screenShot": ""
},

{
  "id": "101",
  "enabled": true,
  "tcDescription": "Count Total files from Transmit Brand System Path",
  "tcExpectedResult": "True",
  "screenShot": ""
}

]

#----------

