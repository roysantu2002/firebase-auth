
const common = require("../common/commonfunc")
const exec = require('child_process').exec
const fs = require("fs")
var assert = require('chai').assert

let testSet = fs.readFileSync(__dirname + '\\testCases_chrome.json')
testCases = JSON.parse(testSet)

let current_datetime = new Date();
let formatted_date = current_datetime.getDate() + "-" + (current_datetime.getMonth() + 1) + "-" + current_datetime.getFullYear();
const dirPath = "./reports/" + formatted_date
let fileNameTxt = "Chrome_" + current_datetime.getDate() + "-" + (current_datetime.getMonth() + 1) + "-" + current_datetime.getFullYear() + "-" + current_datetime.getHours() + "-" + current_datetime.getMinutes() + "-" + current_datetime.getSeconds();
const com = new common(dirPath)
com.createFile(fileNameTxt)

com.createDir();
/* let sysVersion = ""
 fs.readFile(dirPath + '/chrome.txt', 'utf8', function(err, data){
    if(err) throw err
    sysVersion = data
}) 
sysVersion = "83.0.4103.61" */

// killRunningTask("chrome.exe");
// killRunningTaskPromise("chrome.exe").then((data)=>{
// })

let waitTime = 6000;
let waitUntilTimeout = 25000;
let toggleReloadSession = false;

describe('Chrome test cases', function () {
    testCases.map((test) => {
        switch (test.tcID) {
            case "XXXXX01":
                it(test.tcDescription, function () {
                    //Open a goto address
                    browser.reloadSession()
                    browser.navigateTo('http://goto/cloud')
                    // browser.pause(waitTime);
                    browser.waitUntil(
                        () => browser.getTitle() === "Keeping UBS competitive in a digitized world. - goto/Cloud",
                        {
                            timeout: waitUntilTimeout,
                            timeoutMsg: 'expected page goto/cloud couldn\'t load'
                        }
                    );
                    browser.getTitle().should.be.equal("Keeping UBS competitive in a digitized world. - goto/Cloud");
                    browser.pause(waitTime)

                })
                break
            case "XXXXX02":
                it(test.tcDescription, function () {
                    //Use the default homepage
                    if (toggleReloadSession) browser.reloadSession()
                    browser.navigateTo(test.homepage);
                    // browser.pause(waitTime);
                    browser.waitUntil(
                        () => $('//label[text()=\'WebSSO\']').isExisting(),
                        {
                            timeout: waitUntilTimeout,
                            timeoutMsg: 'Timeout waiting for homepage to load. Waited 25 seconds.'
                        }
                    );
                    const isWebSSOElementExists = $('//label[text()=\'WebSSO\']').isExisting()
                    isWebSSOElementExists.should.be.equal(true)
                    browser.pause(waitTime)


                })
                break
            case "XXXXX03":
                it(test.tcDescription, function () {
                    //Open an internet page
                    if (toggleReloadSession) browser.reloadSession()
                    browser.navigateTo('https://www.microsoft.com/en-gb/')
                    // browser.pause(waitTime);
                   browser.waitUntil(
                        () => browser.getTitle() === "Microsoft - Official Home Page",
                        {
                            timeout: waitUntilTimeout,
                            timeoutMsg: 'Timeout waiting for Microsoft page to load'
                        }
                    );
                    browser.getTitle().should.be.equal("Microsoft - Official Home Page");
                    browser.pause(waitTime)
                })
                break
            case "XXXXX04":
                it(test.tcDescription, function () {
                    //Google chrome search bar
                    if (toggleReloadSession) browser.reloadSession()
                    browser.navigateTo("https://google.com");
                    browser.keys(['a', 'b']);
                    com.create_report_body(fileNameTxt, "PASSED", test.tcID, test.tcDescription, test.tcExpectedResult, '', '')

                })
                break
            case "XXXXX05":
                it(test.tcDescription, function () {
                    //WebSSO window launching
                    if (toggleReloadSession) browser.reloadSession()
                    browser.navigateTo(test.homepage);
                    // browser.pause(waitTime);
                    browser.waitUntil(
                        () => $('//label[text()=\'WebSSO\']').isExisting(),
                        {
                            timeout: waitUntilTimeout,
                            timeoutMsg: 'Timeout waiting for homepage to load. Waited 25 seconds.'
                        }
                    );
                    const isWebSSOElementExists = $('//label[text()=\'WebSSO\']').isExisting()
                    isWebSSOElementExists.should.be.equal(true)
                    browser.pause(waitTime)

                })
                break
            case "XXXXX06":
                it(test.tcDescription, function () {
                    //---------------------------------------Default Chrome
                    var regedit = require('regedit')

                    regedit.list('HKCU\\Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice', function (err, result) {
                        var defaultHttpValue = result['HKCU\\Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice'].values['ProgId'].value
                        if (defaultHttpValue === "ChromeHTML") {
                            console.log("Default browser is chrome")
                        } else if (defaultHttpValue === "AppXq0fevzme2pys62n3e0fbqa7peapykr8v") {
                            console.log("Default browser is edge")
                        }
                        defaultHttpValue.should.be.equal("ChromeHTML")
                    })

                    regedit.list('HKCU\\Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\https\\UserChoice', function (err, result) {
                        var defaultHttpsValue = result['HKCU\\Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\https\\UserChoice'].values['ProgId'].value
                        if (defaultHttpsValue === "ChromeHTML") {
                            console.log("Default browser is chrome")
                        } else if (defaultHttpsValue === "AppX90nv6nhay5n6a98fnetv7tpk64pp35es") {
                            console.log("Default browser is edge")
                        }
                        defaultHttpsValue.should.be.equal("ChromeHTML")
                    })

                    browser.pause(waitTime)

                })
                break
            case "XXXXX07":
                 it(test.tcDescription, function () {
                    // browser.pause(waitTime)
                    if (toggleReloadSession) browser.reloadSession()
                    browser.navigateTo('chrome://version/ ')
                    // browser.pause(waitTime)
                    browser.waitUntil(
                        () => $("#outer").isExisting(),
                        {
                            timeout: waitUntilTimeout,
                            timeoutMsg: 'expected id outer couldn\'t be found'
                        }
                    );
                    const body = $("#outer").getText().split("\n")
                    body.map((txt) => {
                        if (txt.includes('Official')) {
                            var version = txt.substring(14, txt.indexOf(".", 14))
                            version.should.be.equal(test.expectedChromeVersion)
                        }
                    })
                    browser.pause(waitTime)

                })
                break

            default:
                console.log('No test found')
        }
    })
})

sleep = (ms) => {
    return new Promise((resolve, reject) => setTimeout(resolve, ms));
}
